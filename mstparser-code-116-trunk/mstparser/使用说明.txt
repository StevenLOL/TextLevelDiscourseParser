运行步骤（仅适用于Windows）：

1. 打开命令窗口cmd，切换到README所在的目录。

2. 将训练数据集放到traindata目录下，数目不限，但是每个训练数据都要同时有相对应的".out"、".dis"、".edus"文件，否则无法进行特征提取。

3. 将测试数据集放到testdata目录下，要求同上一步。

4. 在命令行中输入“run”并回车，等待几分钟便可完成特征提取工作，此时应当在traindata和testdata目录下看到新生成的".dep"、".prim"、".feat"、".para"、".pre"文件，再次运行该命令会覆盖掉之前生成的特征。

5. 编译和运行。
编译命令：
javac -classpath ".;lib\trove.jar" mstparser\DependencyParser.java

Linux:
javac -classpath ".:lib/jwnl-1.3.3.jar:lib/opennlp-maxent-3.0.3.jar:lib/opennlp-tools-1.5.3.jar:libopennlp-uima-1.5.3.jar:lib/trove.jar" mstparser/DependencyParser.java

18种关系、生成模型并测试：
java -classpath ".;lib\trove.jar" -Xmx1200m mstparser.DependencyParser train train-file:data\mytrain18.lab model-name:dep18.model test test-file:data\mytest18.lab output-file:out18.txt eval gold-file:data\mytest18.lab format:MST decode-type:non-proj preload:false

Linux:
java -classpath ".:lib/jwnl-1.3.3.jar:lib/opennlp-maxent-3.0.3.jar:lib/opennlp-tools-1.5.3.jar:libopennlp-uima-1.5.3.jar:lib/trove.jar" -Xmx6g mstparser.DependencyParser train train-file:data/mytrain18.lab model-name:dep18.model test test-file:data/mytest18.lab output-file:out18.txt eval gold-file:data/mytest18.lab format:MST decode-type:non-proj preload:true

110种关系、生成模型并测试：
java -classpath ".;lib\trove.jar" -Xmx1200m mstparser.DependencyParser train train-file:data\mytrain110.lab model-name:dep110.model test test-file:data\mytest110.lab output-file:out110.txt eval gold-file:data\mytest110.lab format:MST decode-type:non-proj preload:false

Linux:
java -classpath ".:lib/jwnl-1.3.3.jar:lib/opennlp-maxent-3.0.3.jar:lib/opennlp-tools-1.5.3.jar:libopennlp-uima-1.5.3.jar:lib/trove.jar" -Xmx6g mstparser.DependencyParser train train-file:data/mytrain110.lab model-name:dep110.model test test-file:data/mytest110.lab output-file:out110.txt eval gold-file:data/mytest110.lab format:MST decode-type:non-proj preload:true

如果想加快运行速度，可以将选项preload修改成true，与此同时-Xmx1200m要修改成-Xmx6g（至少4g）

如果model已经生成了，不需要重新训练，只是修改测试了数据文件或者想重现结果，可运行下面两个命令：

18种关系、直接测试（要求已经生成dep18.model文件，否则无法运行）：
java -classpath ".;lib\trove.jar" -Xmx1200m mstparser.DependencyParser model-name:dep18.model test test-file:data\mytest18.lab output-file:out18.txt eval gold-file:data\mytest18.lab format:MST decode-type:non-proj

Linux:
java -classpath ".:lib/jwnl-1.3.3.jar:lib/opennlp-maxent-3.0.3.jar:lib/opennlp-tools-1.5.3.jar:libopennlp-uima-1.5.3.jar:lib/trove.jar" -Xmx6g mstparser.DependencyParser model-name:dep18.model test test-file:data/mytest18.lab output-file:out18.txt eval gold-file:data/mytest18.lab format:MST decode-type:non-proj preload:true

110种关系、直接测试（要求已经生成dep110.model文件，否则无法运行）：
java -classpath ".;lib\trove.jar" -Xmx1200m mstparser.DependencyParser model-name:dep110.model test test-file:data\mytest110.lab output-file:out110.txt eval gold-file:data\mytest110.lab format:MST decode-type:non-proj

Linux:
java -classpath ".:lib/jwnl-1.3.3.jar:lib/opennlp-maxent-3.0.3.jar:lib/opennlp-tools-1.5.3.jar:libopennlp-uima-1.5.3.jar:lib/trove.jar" -Xmx6g mstparser.DependencyParser model-name:dep110.model test test-file:data/mytest110.lab output-file:out110.txt eval gold-file:data/mytest110.lab format:MST decode-type:non-proj preload:true


6. 结果分析与查看。
cmd窗口会显示精确度数据，同时，在当前目录下会生成statistic文件，对应于详细的统计数据分析。每一列的含义由标题给出。
如果想对测试数据和训练数据文件中的关系数目进行统计，可运行命令"statistic",如果未出现任何错误信息，则可在data目录下看到相应的".sta"文件，其中存储着各种关系的数目统计。

7. 多次运行程序。
如果对特征提取部分进行了修改，需要重新从第4步开始；如果只是修改了学习算法部分，可以保留原先生成的特征文件，从第5步开始。

8. 可能出现的错误及原因：

①特征生成中出现错误，出现类似下面的错误信息：
file name: g:\data\wsj_0660.out line number 0
out of bounds exception! sentencePointer: 0 length: 3 str length 22
这是因为RST树库的".out"文件中出现分句错误，整个树库中大概有30个这样的问题，已经进行了手动修改。

②OutOfMemory错误：内存不够，建议采用“preload:false”选项，该选项可使得程序只占用不超过1G内存。

③编译不成功：由于程序中用到了opennlp的程序库，在eclipse IDE中，需要添加外部库，鼠标右击JRE System Library，选择Build Path-> Configure Build Path，在打开的窗口中选择Add External Jars... ，opennlp的相应库文件都在lib目录下，全部添加进来即可。

